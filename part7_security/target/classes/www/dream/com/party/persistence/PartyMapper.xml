<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="www.dream.com.party.persistence.PartyMapper">
	<!-- resultMap : DB Table 정의 내역과 객체 정의 내역에 있어 mismatch(부조화)가 있을 시 이를 연동, 
		짝 지어주는 정보를 정의함 -->
	<resultMap type="www.dream.com.party.model.Party"
		id="partyMap" extends="www.dream.com.common.persistence.CommonMngVOMapper.commonMngVOMap">
		<!-- 왼쪽은 java에서 오른쪽은 ddl로 정의한 속성을 짝지어준다 -->
		<id property="userId" column="user_id"></id>
		<result property="userPwd" column="user_pwd"></result>
		<result property="name" column="name"></result>
		<result property="birthDate" column="birth_dt"></result>
		<result property="male" column="sex"></result>
		<result property="enabled" column="enabled"></result>
		<!-- Party의 여러개의 연락처가 있는데 그것을 sql에서 join된 결과물들이 나오는데 cp_로 시작하는 칼럼이 나오면 resultMap으로 처리 
			 collection : Master-Detail구조(1:N 구조)에서 Join Query를 통하여 여러 테이블에 들어있는 정보를
			 			  한번에 받아서 java List 속성에 부품 객체를 만들어 조회하는 방법
			 columnPrefix : 각 Table에 들어 있는 컬럼 이름이 중복 될 때 Colum Alias를 SQL에서 달고
			 				이를 객체 구성 시 참조하도록 지원함. 
			 -->
		<collection property="listContactPoint"	columnPrefix="cp_" resultMap="contactPointMap"> <!-- property : 자바 객체속성자리 ofType: 객체 이름 -->
		</collection>

		<!-- discriminator : 판별자. 상속 관련 활용 -->
		<discriminator javaType="String" column="descrim">
			<case value="Admin" resultMap="adminResultMap" />
			<case value="Manager" resultMap="managerResultMap" />
			<case value="User" resultMap="userResultMap" />
		</discriminator>
	</resultMap>
	<resultMap type="www.dream.com.party.model.Admin"
		id="adminResultMap" extends="partyMap">
	</resultMap>
	<resultMap type="www.dream.com.party.model.Manager"
		id="managerResultMap" extends="partyMap">
	</resultMap>
	<resultMap type="www.dream.com.party.model.User"
		id="userResultMap" extends="partyMap">
	</resultMap>
	
	<resultMap type="www.dream.com.party.model.ContactPoint"
		id="contactPointMap" extends="www.dream.com.common.persistence.CommonMngVOMapper.commonMngVOMap">
		<!-- 왼쪽은 java에서 오른쪽은 ddl로 정의한 속성을 짝지어준다 -->
		<id property="contactPointType" column="contact_point_type"></id>
		<result property="info" column="info"></result>		
	</resultMap>
	
	<!-- public List<Party> getList(); 함수 짝지어주기 -->
	<select id="getList" resultMap="partyMap"> 
	<![CDATA[
	select p.*,
		cp.user_id cp_user_id, cp.contact_point_type cp_contact_point_type,
		cp.info cp_info, cp.reg_dt cp_reg_dt, cp.upt_dt cp_upt_dt
      from s_party p left outer join s_contact_point cp on p.user_id = cp.user_id
	]]>
	</select>
	
	<!-- public Party findPartyByUserId(String userId); -->
	<select id="findPartyByUserId" resultMap="partyMap"> 
	<![CDATA[
	select user_id, user_pwd, name, descrim
  	  from s_party p
  	 where user_id = #{userId}
	]]>
	</select>
	
	<!-- public int setPwd(Party p); -->
	<update id="setPwd">
		update s_party
			set user_pwd = #{userPwd}
		  where user_id = #{userId}
	</update>
</mapper>