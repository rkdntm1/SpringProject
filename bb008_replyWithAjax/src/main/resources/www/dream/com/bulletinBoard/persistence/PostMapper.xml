<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="www.dream.com.bulletinBoard.persistence.PostMapper">
	<resultMap type="www.dream.com.bulletinBoard.model.PostVO"
		id="rmPost"
		extends="www.dream.com.common.persistence.CommonMngVOMapper.commonMngVOMap">
		<id property="id" column="id"></id>
		<result property="title" column="title"></result>
		<result property="content" column="content"></result>
		<result property="readCnt" column="read_cnt"></result>
		<result property="likeCnt" column="like_cnt"></result>
		<result property="dislikeCnt" column="dislike_cnt"></result>
	</resultMap>

	<resultMap type="www.dream.com.bulletinBoard.model.PostVO"
		id="rmPostWithWriter" extends="rmPost">
		<!-- Master-Detail(1:N) 구조에서 Detail이 Master를 함께 join으로 읽어서 객체를 만들 때 사용 -->
		<association property="writer" columnPrefix="w_"
			resultMap="www.dream.com.party.persistence.PartyMapper.partyMap">
		</association>
	</resultMap>
	
	<sql id="searchCommon"> <!-- 공통부분 sql로 묶자 -->
	s_hashtag h, sm_ht2post m, s_reply p
	 where h.id in (
	 	   SELECT id
	   	     FROM s_hashtag
		    start with hashtag in
		  <foreach collection="cri.searchingHashtags" item="aWord" open="("  separator=", " close=")">
		  		#{aWord}
		  </foreach>
	   CONNECT BY PRIOR id = super_id
	   	)
	   and h.id = m.hashtag_id
	   and m.reply_id = p.id
	   and p.board_id =  #{boardId}
	</sql>

	<!-- public long getTotalCount(@Param("boardId") int boardId); -->
	<select id="getTotalCount" resultType="_long"> 
	<![CDATA[
		select count(*)
		from s_reply p
		where board_id = #{boardId}
	]]>
	</select>

	<!-- public long getSearchTotalCount(@Param("boardId") int boardId, @Param("cri") Criteria cri); -->
	<select id="getSearchTotalCount" resultType="_long">
	select count(distinct p.id)
	  from <include refid="searchCommon"></include> 
	  
	</select>
	
	<!-- select p.*, w.name w_name, w.descrim w_descrim from ( select p.* , 
		rownum rn from s_post p where rownum <= #{cri.pageNumber} * #{cri.amount} 
		and board_id = #{boardId} order by id desc ) p, s_party w where p.rn > (#{cri.pageNumber} 
		- 1) * #{cri.amount} and p.writer_id = w.user_id -->

	<!--public List<PostVO> getList(@Param("boardId") int boardId, @Param("cri") 
		Criteria cri); -->
	<select id="getList" resultMap="rmPostWithWriter"> 
	<![CDATA[ 
	select p.*, w.name w_name, w.descrim w_descrim
	  from (
    	SELECT *
		  FROM s_reply
		 where board_id =  #{boardId}
		 ORDER BY id DESC
		OFFSET (#{cri.pageNumber} - 1) * #{cri.amount} ROWS FETCH FIRST #{cri.amount} ROWS ONLY
		) p, s_party w
	     WHERE p.writer_id = w.user_id
	   
	]]>
	</select>

	<!-- public List<PostVO> getListByHashTag(@Param("boardId") int boardId, 
		@Param("cri") Criteria cri); -->
	<select id="getListByHashTag" resultMap="rmPostWithWriter"> 
	select distinct p.*, w.name w_name, w.descrim w_descrim
	  from s_party w, 
	       <include refid="searchCommon"></include> 
	   and p.writer_id = w.user_id
	 ORDER BY p.id DESC
	OFFSET (#{cri.pageNumber} - 1) * #{cri.amount} ROWS FETCH FIRST #{cri.amount} ROWS ONLY	    
	</select>

	<!-- public PostVO findPostById(String id); -->
	<select id="findPostById" resultMap="rmPostWithWriter"> 
	<![CDATA[ 
	select p.*, w.name w_name, w.descrim w_descrim
	  from s_reply p, s_party w
	 where p.id = #{id}
	   and p.writer_id = w.user_id
	]]>
	</select>

	<!-- public int insert(@Param("board") BoardVO board, @Param("post") PostVO 
		post); -->
	<insert id="insert">
		<selectKey keyProperty="post.id" order="BEFORE"
			resultType="string">
			select get_id(seq_reply_id.nextval) from dual
		</selectKey>
		insert into s_reply(id, board_id, writer_id, title, content)
		values(#{post.id}, #{board.id}, #{post.writer.userId}, #{post.title},
		#{post.content})
	</insert>

	<!-- public int updatePost(PostVO post); -->
	<update id="updatePost">
		update s_reply
		set title = #{title},
		content =
		#{content},
		upt_dt = sysdate
		where id=#{id}
	</update>

	<!-- public int deletePostById(String id); -->
	<delete id="deletePostById">
		delete from s_reply where id = #{id}
	</delete>
</mapper>